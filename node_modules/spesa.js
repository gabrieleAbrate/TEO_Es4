// primo metodo per la creazione di una classe in javascript (function)
/*function Spesa(){
    let data;

    let getData = () => {
        return data;
    }
}*/

// secondo metodo per la creazione di una classe in javascript (prototype)
// serve ad estendere e modificare una classe già esistente (solo la usa istanza, non la classe)
/*let s = new Spesa();
s.prototype.setData = (data) => {
    this.data = data;
}*/

// terzo metodo per la creazione di una classe in javascript (object | json)
/*let obj = {
    data: null,
    getData: () => {
        return this.data;
    }
};*/

// quarto metodo per la creazione di una classe in javascript (ES6)
/*
    - non esiste l'overloading / polimorfismo dei metodi
    - il costruttore può anche non essere definito
    - non si può gestire la diversa visibilità dei metodi e delle proprietà
    - non esistono le interfacce e le classi astratte
*/
/*
    se ho il trattino (_) davanti al nome della proprietà, è un modo per indicarne la sua privatazza
    export => rende la classe visibile all'esterno del file
    import => importa la classe da un altro file
    default => indica che la classe è quella principale del file
*/

// esporto una classe per la require di nodejs
module.exports = Spesa;

// esporto una classe per la import di ES6
export default class Spesa{
    _data = null;
    _negozio = null;
    _utente;

    get data(){
        if(this._data)
            return this._data;
        else
            return null;
    }

    set data(data){
        if(data instanceof Date)
            this._data = data;
        else
            throw 'data deve essere di tipo Date';
    }   

    // posso inserire nuovi parametri nel costruttore, come ad esempio _importo
    // data = new Date() => è un parametro opzionale, se non viene passato, viene utilizzato il valore di default
    constructor(negozio, importo, utente, data = new Date()){
        // this.data => richiamo il metodo get data() e non la proprietà _data
        this.data = data;
        this._negozio = negozio;
        // definito direttamente nel costruttore
        this._importo = importo;
        this._utente = utente;
    }
}

let s = new Spesa('carrefour', 10, 'mario');
console.log(s.data);